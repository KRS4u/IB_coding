
vector<vector<string>>ans;
void printSolution( vector<vector<int>> board) 
{ int N=board.size();
    vector<string>abc;
   // cout<<N<<" ";
    for (int i = 0; i < N; i++) 
    { string st="";
        for (int j = 0; j < N; j++) 
            {if(board[i][j]==1)
            st+='Q';
                else
                st+='.';
            }
        abc.push_back(st);
    } 
    ans.push_back(abc);
} 
  
bool isSafe( vector<vector<int>> board, int row, int col) 
{ 
    int i, j,N=board.size(); 
  
   
    for (i = 0; i < col; i++) 
        if (board[row][i]) 
            return false; 
  
    for (i=row, j=col; i>=0 && j>=0; i--, j--) 
        if (board[i][j]) 
            return false; 
  
    
    for (i=row, j=col; j>=0 && i<N; i++, j--) 
        if (board[i][j]) 
            return false; 
  
    return true; 
} 
  

bool solveNQUtil( vector<vector<int>> board, int col) 
{ 
    int N=board.size();
    
    if (col == N) 
    { 
        printSolution(board); 
        return true; 
    } 
  
   
    bool res = false; 
    for (int i = 0; i < N; i++) 
    { 
      
        if ( isSafe(board, i, col) ) 
        { 
            
            board[i][col] = 1; 
  
            
            res = solveNQUtil(board, col + 1) || res; 
  
            
            board[i][col] = 0; // BACKTRACK 
        } 
    } 
  
   
    return res; 
} 
void solveNQ(int a) 
{ 
    vector<vector<int>> board; 
    for(int i=0;i<a;++i)
    {
        vector<int>x(a,0);
        board.push_back(x);
    }
  
    if (solveNQUtil(board, 0) == false) 
    { 
       ans.clear();
        return ; 
    } 
  
    return ; 
}
vector<vector<string> > Solution::solveNQueens(int A) {

   // N=A;
   ans.clear();
    solveNQ(A);
    return ans;
}
