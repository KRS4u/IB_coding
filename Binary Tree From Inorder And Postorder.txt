/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
TreeNode* maker(int l1, int r1, int l2, int r2, vector<int> &A, vector<int> &B, int &n)
{
    if(l1<0 || l2<0)
    return NULL;
    if(r1>=n || r2>=n)
    return NULL;
    if(l1>r1)
    return NULL;
    if(l2>r2)
    return NULL;
    
    int i=0,j=0,k=0,val=B[r2];
    
    TreeNode *cur=new TreeNode(val);
    for(i=l1;i<=r1;++i)
    if(A[i]==val)
    break;
    j=i-l1-1;
    if(i==l1)
    cur->left=NULL;
    else
    cur->left=maker(l1,i-1,l2,l2+j,A,B,n);
    if(i==r1)
    cur->right=NULL;
    else
    cur->right=maker(i+1,r1,l2+j+1,r2-1,A,B,n);
    return cur;
}
TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
    int n=A.size();
    return maker(0,n-1,0,n-1,A,B, n);
}
