stack<int>st;
    int mn;
MinStack::MinStack() {
    while(!st.empty())
    st.pop();
    mn=INT_MAX;
}

void MinStack::push(int x) {
    if(st.empty())
    {
        st.push(x);
        mn=x;
    }
    else
    {
        if(x<mn)
        {
         st.push(2*x-mn);
         mn=x;
        }
        else
        st.push(x);
    }
}

void MinStack::pop() {
    if(!st.empty())
    {
        if(st.top()<mn)
        {
            mn=2*mn-st.top();
            st.pop();
        }
        else
        st.pop();
    }
}

int MinStack::top() {
    if(st.empty())
    return -1;
    else
    {
        
        if(st.top()<mn)
        {
           return mn;
        }
        else
        return st.top();
    }
    
}

int MinStack::getMin() {
    if(st.empty())
    return -1;
    return mn;
}

