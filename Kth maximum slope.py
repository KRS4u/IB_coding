#BookMarked
brute=[(-24118, -10542, -20078, 23838), (4623, -15826, 9561, 27189), (29733, -8978, 31981, 12581), (-24227, -5907, -20577, 29617), (4623, -15826, 8563, 22795), (-24474, 8935, -22363, 30041), (-21630, -11400, -20594, -1023), (-3565, -8329, -1338, 13998), (-3855, -11382, -1338, 13998), (-23154, -27621, -20594, -1023), (-3855, -11382, -3565, -8329), (-23154, -27621, -21630, -11400), (-19882, -27005, -18283, -9467), (27606, -13874, 29151, 3239), (-8738, -10681, -8055, -3053), (-24118, -10542, -20577, 29617), (7604, 4580, 9561, 27189), (-24474, 8935, -23445, 22974), (-30836, -26867, -29445, -7349), (-23154, -27621, -20078, 23838), (7604, 4580, 8563, 22795), (7075, -20722, 9561, 27189), (-24227, -5907, -22363, 30041), (495, 3591, 1908, 31690), (27606, -13874, 29264, 21901), (-23154, -27621, -20577, 29617), (-21630, -11400, -20078, 23838), (-24118, -10542, -22363, 30041), (-24474, 8935, -23692, 28074), (7075, -20722, 8563, 22795), (18846, -24834, 20489, 25141), (-24227, -5907, -23445, 22974), (-21630, -11400, -20577, 29617), (-15022, -15787, -14723, -3432), (7075, -20722, 7604, 4580), (-20594, -1023, -20078, 23838), (-24118, -10542, -23445, 22974), (-24227, -5907, -23692, 28074), (-23154, -27621, -22363, 30041), (-30836, -26867, -30432, 6038), (-24118, -10542, -23692, 28074), (-8738, -10681, -8616, 8707), (29151, 3239, 29264, 21901), (-20363, -26790, -20078, 23838), (-20594, -1023, -20577, 29617)]
bruti=[(-23445, 22974, -23154, -27621), (27372, 19410, 27606, -13874), (12654, 18479, 12779, 7811), (29264, 21901, 29733, -8978), (-24474, 8935, -24227, -5907), (-22363, 30041, -21630, -11400), (-18283, -9467, -18028, -21547), (21963, -8346, 22290, -23639), (-24227, -5907, -24118, -10542), (31981, 12581, 32707, -6139), (20489, 25141, 21963, -8346), (12779, 7811, 14119, -22566), (-8616, 8707, -8055, -3053), (-23692, 28074, -23445, 22974), (1908, 31690, 4623, -15826), (-30432, 6038, -29445, -7349), (-1338, 13998, 495, 3591), (9561, 27189, 12654, 18479), (4623, -15826, 7075, -20722), (-8055, -3053, -3855, -11382), (-14697, -24637, -14091, -25023), (14119, -22566, 18846, -24834), (-18028, -21547, -15022, -15787), (-14091, -25023, -8738, -10681), (-29445, -7349, -24474, 8935), (8563, 22795, 9561, 27189), (22290, -23639, 27372, 19410), (29733, -8978, 31981, 12581), (-21630, -11400, -20594, -1023), (-3565, -8329, -1338, 13998), (-3855, -11382, -3565, -8329), (-19882, -27005, -18283, -9467), (27606, -13874, 29151, 3239), (7604, 4580, 8563, 22795), (495, 3591, 1908, 31690), (18846, -24834, 20489, 25141), (-15022, -15787, -14723, -3432), (7075, -20722, 7604, 4580), (-23154, -27621, -22363, 30041), (-30836, -26867, -30432, 6038), (-24118, -10542, -23692, 28074), (-8738, -10681, -8616, 8707), (29151, 3239, 29264, 21901), (-20363, -26790, -20078, 23838), (-20594, -1023, -20577, 29617)]

from math import gcd
def formatCoordinates(point):
    if point[0]==point[2]:
        return [-1,0]
    if point[1]==point[3]:
        return [0,1]
    sign1 = -1 if point[0]<point[2] else 1
    sign2 = -1 if point[1]<point[3] else 1
    deno=point[0]-point[2]
    num=point[1]-point[3]
    hcf=gcd(abs(num), abs(deno))
    return[(sign1*sign2)*(abs(num)//hcf), abs(deno)//hcf]

def bruteForceMaxiumSlope(A, coordinates):
    slopes2=[]
    coordinates.sort(key=lambda sub: (sub[0], -sub[1]))
    for i in range(len(coordinates)):
        for j in range(i+1,len(coordinates)):
            slopes2.append((coordinates[i][0],coordinates[i][1],coordinates[j][0],coordinates[j][1]))
    slopes2.sort(key=lambda sub: -(10**9+7) if sub[0]==sub[2] else (sub[1]-sub[3])/(sub[0]-sub[2]))
    """ findKthMaximumSlope(A,coordinates)
    checker(slopes2[-A:], coordinates) """
    return formatCoordinates(slopes2[-A])

def findKthMaximumSlope(A, coordinates):
    slopes=[]
    coordinates.sort(key=lambda sub: (sub[0], -sub[1]))
    coSet={}
    for ind in range(len(coordinates)-A):
        for i in range(ind, ind+A+1):
            for j in range(i+1, ind+A+1):
                key=(i,j)
                val=(coordinates[i][0],coordinates[i][1],coordinates[j][0],coordinates[j][1])
                if key not in coSet:
                    slopes.append(val)
                    coSet[key]=1
    slopes.sort(key=lambda sub: -(10**9+7) if sub[0]==sub[2] else (sub[1]-sub[3])/(sub[0]-sub[2]))
    return formatCoordinates(slopes[-A])

class Solution:
    # @param A : integer
    # @param B : list of integers
    # @param C : list of integers
    # @return a list of integers
    def solve(self, A, B, C):
        n=len(B)
        if n==1:
            return [-1,0]
        coordinates=[]
        for i in range(n):
            coordinates.append((B[i],C[i]))
        B.clear()
        C.clear()
        if A>=n-1:
            return bruteForceMaxiumSlope(A,coordinates)
        else:
            return findKthMaximumSlope(A, coordinates)

X= [ 8563, 29264, -14723, 7604, -24227, -23692, -20363, -22363, -3565, -23445, 495, -15022, 29151, -8055, -8738, -19882, 12654, 32707, -1338, 22290, -23154, 4623, -20078, 31981, 29733, -20594, 18846, -29445, -8616, 20489, 21963, -14697, -21630, 1908, -24474, 27372, -3855, 9561, 27606, 7075, 14119, -30432, 12779, -18283, -30836, -24118, -18028, -20577, -14091 ]
Y=[ 22795, 21901, -3432, 4580, -5907, 28074, -26790, 30041, -8329, 22974, 3591, -15787, 3239, -3053, -10681, -27005, 18479, -6139, 13998, -23639, -27621, -15826, 23838, 12581, -8978, -1023, -24834, -7349, 8707, 25141, -8346, -24637, -11400, 31690, 8935, 19410, -11382, 27189, -13874, -20722, -22566, 6038, 7811, -9467, -26867, -10542, -21547, 29617, -25023 ]
""" X=[0, 1, 2, 3, 4]
Y=[0, 1, 2, 3, 3] """
obj=Solution().solve(44,X, Y)
print('resp',obj)
