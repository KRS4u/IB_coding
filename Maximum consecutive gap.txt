#Bookmarked

// Approach 1 O(nlogn)
int Solution::maximumGap(const vector<int> &B) {
    vector<int>A(B);
    int n=A.size(),i,mx;
    if(n<2)
    return 0;
    sort(A.begin(),A.end());
    mx=INT_MIN;
    for(i=1;i<n;++i)
    mx=max(mx,abs(A[i]-A[i-1]));
    return mx;
}

//Approach2
int Solution::maximumGap(const vector<int> &A) {
    int n=A.size(),i,j;
    if(n<2)
    return 0;
    int maxElement=*max_element(A.begin(),A.end());
    int minElement=*min_element(A.begin(),A.end());
    int gap = ceil((float)(maxElement-minElement)/(n-1));
    if(gap==0){
        return 0;
    }
    vector<pair<int,int>>v(n-1, make_pair(0,0));
    for(i=0;i<n;++i){
        int bucketNo = (A[i]-minElement)/gap;
        if(bucketNo>=n-1){
            bucketNo=n-2;
        }
        v[bucketNo].first = v[bucketNo].first == 0 ? A[i]: min(v[bucketNo].first, A[i]); 
        v[bucketNo].second=max(v[bucketNo].second, A[i]);
    }
    int ans=v[0].second-v[0].first;
    j=0;
    for(i=1;i<n-1;++i){
        ans=max(ans, max(v[i].second-v[i].first, v[i].first-v[j].second));
        if(v[i].first!=0){
            j=i;
        }
    }
    return ans;
}
